Clarifications:

15-04-2024: 

1. In Question 6 part 1: the input param in the function histogram_kernel does nothing, 
it is present only to guarantee the same function signature as for the function kmer_kernel 
so that these can be both used interchangeably.

2. When the object is a container for numerical values assume it is always a numpy array.  
Predicted labels, targets, etc should all be numpy arrays.



12-04-2024: 

1. When the term list is mentioned in the CA instructions it refers to the Python list object. 

2. When the term sequence is used in the CA it refers to ASCII strings like for example 'EEFEFEGGFGEFGEFGEGFEFFEG'  

Amendments:


15-04-2024: In question 7 the data type specification for input objects (indicated as X or X_test) is incorrect: 
the idea of using a kernel is that we can process any data type, provided that the 
kernel can be computed over that data type. So instead of 'X: feature matrix (numpy array or pandas DataFrame)' 
it should be: 'X: input data (of data type compatible with the kernel function)'. This means that it should be 
possible to pass numpy arrays if the kernel accepts arrays or sequences of strings if the kernel accepts sequences of strings. 

13-04-2024: in Question 2 ignore the text in Notes.

13-04-2024: in Question 3 the number of weak learners for AdaBoost and the number of Decision Trees for Random Forest should be 100.

12-04-2024: in Question 5 instead of 

compute_learning_curve(train_func, test_func, param, X, y, test_size, n_steps, n_repetitions)

it should be

compute_learning_curve(estimator, X, y, test_size, n_steps, n_repetitions)

that is, pass an estimator rather the the separate train_func, test_func.


__________________________________________________________________________________________________________________________________
def histogram_vectorizer_old(seqs):
    def vectotize_single_string(seq):
        counter = dict.fromkeys(seq, 0) # Initializing the counter
        for char in seq:
            counter[char] += 1
        histogram_vector = list(counter.values())
        return histogram_vector
    vectorized_seqs = [vectotize_single_string(seq) for seq in seqs]
    return vectorized_seqs
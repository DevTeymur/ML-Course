2024-04-21-16-42-01 390 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from mpl_toolkits.mplot3d import Axes3D	import numpy as np	import scipy as sp	import cvxopt	from submission_utils import save_history, check_and_prepare_for_submission	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-04-21-16-42-01 390 2 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from mpl_toolkits.mplot3d import Axes3D	import numpy as np	import scipy as sp	import cvxopt	from submission_utils import save_history, check_and_prepare_for_submission	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-04-21-16-42-01 390 3 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    # YOUR CODE HERE	    raise NotImplementedError()		def perturb(master_sequence, noise):	    # YOUR CODE HERE	    raise NotImplementedError()		def randomize_length(seqs, endpoint_trim_dim):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()	    	save_history()
2024-04-21-16-42-01 390 4 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')
2024-04-21-16-42-01 390 5 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    # YOUR CODE HERE	    raise NotImplementedError()		def randomize_length(seqs, endpoint_trim_dim):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()	    	save_history()
2024-04-21-16-42-01 390 6 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)
2024-04-21-16-42-01 390 7 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    seq_array = np.array(list(master_sequence))	    num_perturbations = int(len(seq_array) * noise)	    for _ in range(num_perturbations):	        i1, i2 = np.random.choice(len(seq_array), 2, replace=False)	        seq_array[i1], seq_array[i2] = seq_array[i2], seq_array[i1]	    return ''.join(seq_array		def randomize_length(seqs, endpoint_trim_dim):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()	    	save_history()
2024-04-21-16-42-01 390 8 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    seq_array = np.array(list(master_sequence))	    num_perturbations = int(len(seq_array) * noise)	    for _ in range(num_perturbations):	        i1, i2 = np.random.choice(len(seq_array), 2, replace=False)	        seq_array[i1], seq_array[i2] = seq_array[i2], seq_array[i1]	    return ''.join(seq_array)		def randomize_length(seqs, endpoint_trim_dim):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()	    	save_history()
2024-04-21-16-42-01 390 9 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.1)	print("Perturbed sequence:", perturbed_seq)
2024-04-21-16-42-01 390 10 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.1)	print("Perturbed sequence:", perturbed_seq)
2024-04-21-16-42-01 390 11 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)
2024-04-21-16-42-01 390 12 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    seq_array = np.array(list(master_sequence))	    num_perturbations = int(len(seq_array) * noise)	    for _ in range(num_perturbations):	        i1, i2 = np.random.choice(len(seq_array), 2, replace=False)	        seq_array[i1], seq_array[i2] = seq_array[i2], seq_array[i1]	    return ''.join(seq_array)		def randomize_length(seqs, endpoint_trim_dim):	    randomized_seqs = []	    for seq in seqs:	        trim_length = np.random.randint(0, endpoint_trim_dim + 1)	        randomized_seqs.append(seq[trim_length:-trim_length])	    return randomized_seqs		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    # YOUR CODE HERE	    raise NotImplementedError()	    	save_history()
2024-04-21-16-42-01 390 13 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)		# For example 4	seqs = ["salam", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=2)	print("Randomized sequences:", randomized_seqs)
2024-04-21-16-42-01 390 14 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)		# For example 4	seqs = ["salam", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=8)	print("Randomized sequences:", randomized_seqs)
2024-04-21-16-42-01 390 15 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)		# For example 4	seqs = ["salam", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=1)	print("Randomized sequences:", randomized_seqs)
2024-04-21-16-42-01 390 16 np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)		# For example 4	seqs = ["salam", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=2)	print("Randomized sequences:", randomized_seqs)

2024-04-22-15-28-27 198 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from mpl_toolkits.mplot3d import Axes3D	import numpy as np	import scipy as sp	import cvxopt	from submission_utils import save_history, check_and_prepare_for_submission	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-04-22-15-28-27 198 2 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    # return ''.join([chr(start_char + random.randint(0, alphabet_size - 1)) for i in range(seq_length)])	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    seq_array = np.array(list(master_sequence))	    num_perturbations = int(len(seq_array) * noise)	    for _ in range(num_perturbations):	        i1, i2 = np.random.choice(len(seq_array), 2, replace=False)	        seq_array[i1], seq_array[i2] = seq_array[i2], seq_array[i1]	    return ''.join(seq_array)		def randomize_length(seqs, endpoint_trim_dim):	    randomized_seqs = []	    for seq in seqs:	        trim_length = np.random.randint(0, endpoint_trim_dim + 1)	        randomized_seqs.append(seq[trim_length:-trim_length])	    return randomized_seqs		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    inliners = [perturb(master_sequence, inliner_noise) for _ in range(n_inliners)] 	    outliers = [perturb(master_sequence, outlier_noise) for _ in range(n_outliers)]	    all_seqs = inliners + outliers	    if endpoint_trim_dim is not None:	        all_seqs = randomize_length(all_seqs, endpoint_trim_dim)	    return all_seqs		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    sequences, targets = [], []	    for i in range(n_clusters):	        cluster_centre = perturb(master_sequence, cluster_centres_noise)	        cluster_seqs = make_single_cluster_data(cluster_centre, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim)	        sequences.extend(cluster_seqs)	        targets.extend([i] * len(cluster_seqs))	    return sequences, targets	 
2024-04-22-15-28-27 198 3 np.random.seed(42)		# Example 1: permute function	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# Example 2: generate_master_sequence function	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# Example 3: perturb function	perturbed_seq = perturb(master_seq, noise=0.1)	print("Perturbed sequence:", perturbed_seq)		# Example 4: randomize_length function	seqs = ["tima", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=2)	print("Randomized sequences:", randomized_seqs)		# Example 5: make_single_cluster_data function	master_sequence = "againtemperature"	inlier_seqs = make_single_cluster_data(master_sequence, n_inliners=3, n_outliers=2, inliner_noise=0.1, outlier_noise=0.5)	print("Inlier sequences:", inlier_seqs[:3])	print("Inlier sequences:", inlier_seqs[3:])		# Example 6: make_data function	master_sequence = "anotherwordthatdoesnotexist"	seqs, targets = make_data(master_sequence, n_clusters=2, cluster_centres_noise=0.1, n_inliners=3, n_outliers=2, inliner_noise=0.1, outlier_noise=0.5)	print("Generated sequences:", seqs)	print("Cluster labels:", targets)
2024-04-22-15-28-27 198 4 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 5 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 6 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 7 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 8 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 9 # This cell is reserved for the unit tests. Do not consider this cell. 
2024-04-22-15-28-27 198 10 def histogram_vectorizer(seqs):	    """	    Convert sequences into numerical representations using histogram vectorization.		    Parameters:	    - seqs (list of str): A list of sequences (strings).		    Returns:	    - numpy array: A matrix where each row represents the histogram vectorized representation of a sequence.	    """	    # Inner function to compute histogram vector for a single sequence	    def vectorize_sequence(seq):	        counter = dict.fromkeys(seq, 0)  # Initialize counter with unique characters in sequence	        for char in seq:	            counter[char] += 1  # Count occurrences of each character	        hist_vector = list(counter.values())  # Create histogram vector	        return hist_vector		    # Apply vectorization to each sequence in the list	    vectorized_seqs = [vectorize_sequence(seq) for seq in seqs]	    return np.array(vectorized_seqs)		from sklearn.decomposition import PCA		def pca_plot(X, y=None):	    """	    Perform PCA on the input data matrix and visualize the data points in 2D.		    Parameters:	    - X (numpy array): Data matrix where each row represents a sample and each column represents a feature.	    - y (numpy array or None): Labels corresponding to each sample for color-coding in the plot (optional).		    Returns:	    - None (plots the PCA scatter plot).	    """	    # Perform PCA to reduce dimensionality to 2D	    pca = PCA(n_components=2)	    X_pca = pca.fit_transform(X)		    # Plot the data points	    import matplotlib.pyplot as plt	    plt.figure(figsize=(8, 6))	    if y is None:	        plt.scatter(X_pca[:, 0], X_pca[:, 1], alpha=0.8)	    else:	        # Color-code data points based on labels	        colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']	        unique_labels = np.unique(y)	        for label in unique_labels:	            plt.scatter(X_pca[y == label, 0], X_pca[y == label, 1], c=colors[label], label=label, alpha=0.8)	        plt.legend(loc='best')	    plt.xlabel('Principal Component 1')	    plt.ylabel('Principal Component 2')	    plt.title('PCA Plot')	    plt.grid(True)	    plt.show()
2024-04-22-15-28-27 198 11 master_sequence = generate_master_sequence(alphabet_size=4, seq_length=150, start_char=68)	n_instances = 200	n_outliers = n_instances//9	n_inliners = n_instances - n_outliers	seqs, targets = make_data(	    master_sequence, 	    n_clusters=2,	    cluster_centres_noise=.5,	    n_inliners=n_inliners, 	    n_outliers=0, 	    inliner_noise=.15, 	    outlier_noise=.99, 	    endpoint_trim_dim=15)		X = histogram_vectorizer(seqs)	pca_plot(X, y=targets)
2024-04-22-15-28-27 198 12 master_sequence = generate_master_sequence(alphabet_size=4, seq_length=150, start_char=68)	n_instances = 200	n_outliers = n_instances//9	n_inliners = n_instances - n_outliers	seqs, targets = make_data(	    master_sequence, 	    n_clusters=2,	    cluster_centres_noise=.5,	    n_inliners=n_inliners, 	    n_outliers=0, 	    inliner_noise=.15, 	    outlier_noise=.99, 	    endpoint_trim_dim=15)		X = histogram_vectorizer(seqs)	# pca_plot(X, y=targets)	print(X)
2024-04-22-15-28-27 198 13 master_sequence = generate_master_sequence(alphabet_size=4, seq_length=150, start_char=68)	n_instances = 200	n_outliers = n_instances//9	n_inliners = n_instances - n_outliers	seqs, targets = make_data(	    master_sequence, 	    n_clusters=2,	    cluster_centres_noise=.5,	    n_inliners=n_inliners, 	    n_outliers=0, 	    inliner_noise=.15, 	    outlier_noise=.99, 	    endpoint_trim_dim=15)		print(seqs)	# X = histogram_vectorizer(seqs)	# pca_plot(X, y=targets)	# print(X)

2024-04-22-14-44-15 197 1 import pandas as pd	import numpy as np	import matplotlib.pyplot as plt		from sklearn.preprocessing import MinMaxScaler		from tensorflow.keras.models import Sequential # type: ignore	from tensorflow.keras.layers import Dense, LSTM # type: ignore	from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore	from tensorflow.keras.callbacks import EarlyStopping # type: ignore		from warnings import filterwarnings	filterwarnings('ignore')
2024-04-22-14-44-15 197 2 org_df = pd.read_csv('input/train.csv')	org_df['timestamp'] = pd.to_datetime(org_df['timestamp']).dt.tz_localize(None)		from src.data_pull import get_data_from_foundry	from src.variables import RID_TEST	org_df = get_data_from_foundry(RID_TEST)
2024-04-22-14-44-15 197 3 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 4 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 5 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 6 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 7 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 8 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 9 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 10 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 11 # Labelling train data	from src.variables import TARGET_COL_NAME		intervals = [	            ['2024-02-03 08:00', '2024-02-04 11:35'],	            ['2024-02-20 11:00', '2024-02-20 13:42'],	            ['2024-03-03 11:40', '2024-03-04 12:14'],	            ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 12 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df.shutin.value_counts()
2024-04-22-14-44-15 197 13 df.timestamp.min(), df.timestamp.max()
2024-04-22-14-44-15 197 14 org_df.info()
2024-04-22-14-44-15 197 15 print(df.head())
2024-04-22-14-44-15 197 16 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 17 print(df.head())
2024-04-22-14-44-15 197 18 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 19 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()	df.head()
2024-04-22-14-44-15 197 20 print(df.head())
2024-04-22-14-44-15 197 21 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 22 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 23 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 24 print(df.head())
2024-04-22-14-44-15 197 25 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 26 len(df)
2024-04-22-14-44-15 197 27 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 28 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 29 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 30 len(df)
2024-04-22-14-44-15 197 31 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 32 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].unique
2024-04-22-14-44-15 197 33 # Labelling train data	from src.variables import TARGET_COL_NAME		# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].unique()
2024-04-22-14-44-15 197 34 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].unique()
2024-04-22-14-44-15 197 35 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 36 plt.figure(figsize=(12, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 37 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 38 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2024-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = \	    scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data['shutin'].values, test_data['shutin'].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 39 df.head()
2024-04-22-14-44-15 197 40 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 41 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2024-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = \	    scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data['shutin'].values, test_data['shutin'].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 42 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2024-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = \	    scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data[TARGET_COL_NAME].values, test_data[TARGET_COL_NAME].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 43 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2024-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data[TARGET_COL_NAME].values, test_data[TARGET_COL_NAME].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 44 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2023-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data[TARGET_COL_NAME].values, test_data[TARGET_COL_NAME].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 45 from src.variables import BATCH_SIZE, LENGTH_TIMESTEPS		train_generator = TimeseriesGenerator(X_train, y_train, length=LENGTH_TIMESTEPS, batch_size=BATCH_SIZE)	test_generator = TimeseriesGenerator(X_test, y_test, length=LENGTH_TIMESTEPS, batch_size=BATCH_SIZE)
2024-04-22-14-44-15 197 46 # Define input and output shapes	input_shape = (LENGTH_TIMESTEPS, 1)  # Input shape: (time steps, features)	output_shape = 1  # Output shape: single binary value (0 or 1)	print(f'Running model with {input_shape} input shape and {output_shape} output shape')		model = Sequential()	model.add(LSTM(50, input_shape=input_shape, activation='relu'))	model.add(Dense(units=output_shape, activation='sigmoid'))		model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])	model.summary()
2024-04-22-14-44-15 197 47 early_stopping = EarlyStopping(monitor='val_loss', patience=1)		history = model.fit(train_generator, epochs=10, validation_data=test_generator, callbacks=[early_stopping])
2024-04-22-14-44-15 197 48 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 49 from src.variables import RESAMPLE_FREQ		df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 50 from src.variables import RESAMPLE_FREQ		print(f'Resampling the data to {RESAMPLE_FREQ} minutes')	df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 51 import pandas as pd	import numpy as np	import matplotlib.pyplot as plt		from sklearn.preprocessing import MinMaxScaler		from tensorflow.keras.models import Sequential # type: ignore	from tensorflow.keras.layers import Dense, LSTM # type: ignore	from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore	from tensorflow.keras.callbacks import EarlyStopping # type: ignore		from src.variables import RESAMPLE_FREQ			from warnings import filterwarnings	filterwarnings('ignore')
2024-04-22-14-44-15 197 52 print(f'Resampling the data to {RESAMPLE_FREQ} minutes')	df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 53 RESAMPLE_FREQ = 10	print(f'Resampling the data to {RESAMPLE_FREQ} minutes')	df = org_df.resample(f'{RESAMPLE_FREQ}Min', on='timestamp').mean().reset_index().interpolate(method='linear')	print(f'There are {df.isna().sum().sum()} missing values in the dataset')	print(f'Lenght of the resampled dataset: {len(df)}, lenght of the original dataset: {len(org_df)}')
2024-04-22-14-44-15 197 54 df.head()
2024-04-22-14-44-15 197 55 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-07 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 56 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 57 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-08 02:00'],	            ['2023-04-20 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 58 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 59 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-08 02:00'],	            ['2023-04-21 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 60 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-08 02:00'],	            ['2023-04-21 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 61 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-08 02:00'],	            ['2023-04-21 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 62 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 63 # Labelling train data	from src.variables import TARGET_COL_NAME	df[TARGET_COL_NAME] = 0	# intervals = [	#             ['2024-02-03 08:00', '2024-02-04 11:35'],	#             ['2024-02-20 11:00', '2024-02-20 13:42'],	#             ['2024-03-03 11:40', '2024-03-04 12:14'],	#             ]		# C13Z	intervals = [	            ['2023-03-07 09:00', '2023-03-08 02:00'],	            ['2023-04-24 22:15', '2023-04-25 10:33'],	            ['2023-05-18 18:44', '2023-05-18 23:46'],	            ['2023-10-21 15:05', '2023-10-22 21:09'],	            ]		for interval in intervals:	    df.loc[(df['timestamp'] >= pd.to_datetime(interval[0])) & 	           (df['timestamp'] <= pd.to_datetime(interval[1])), TARGET_COL_NAME] = 1		df[TARGET_COL_NAME].value_counts()
2024-04-22-14-44-15 197 64 plt.figure(figsize=(15, 6))	plt.scatter(df['timestamp'], df['dhp'], c=df[TARGET_COL_NAME  ], cmap='viridis', s=2)	plt.title('DHP vs Time')	plt.show()
2024-04-22-14-44-15 197 65 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2023-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data[TARGET_COL_NAME].values, test_data[TARGET_COL_NAME].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 66 scaler = MinMaxScaler()	sclice_date = pd.to_datetime('2023-09-01')	train_data = df[df['timestamp'] < sclice_date]	test_data = df[df['timestamp'] >= sclice_date]	X_train, X_test, y_train, y_test = scaler.fit_transform(train_data[['dhp']]), scaler.transform(test_data[['dhp']]), train_data[TARGET_COL_NAME].values, test_data[TARGET_COL_NAME].values	print(f'Train data shape: {X_train.shape}, Test data shape: {X_test.shape}')
2024-04-22-14-44-15 197 67 from src.variables import BATCH_SIZE, LENGTH_TIMESTEPS		train_generator = TimeseriesGenerator(X_train, y_train, length=LENGTH_TIMESTEPS, batch_size=BATCH_SIZE)	test_generator = TimeseriesGenerator(X_test, y_test, length=LENGTH_TIMESTEPS, batch_size=BATCH_SIZE)
2024-04-22-14-44-15 197 68 # Define input and output shapes	input_shape = (LENGTH_TIMESTEPS, 1)  # Input shape: (time steps, features)	output_shape = 1  # Output shape: single binary value (0 or 1)	print(f'Running model with {input_shape} input shape and {output_shape} output shape')		model = Sequential()	model.add(LSTM(50, input_shape=input_shape, activation='relu'))	model.add(Dense(units=output_shape, activation='sigmoid'))		model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])	model.summary()
2024-04-22-14-44-15 197 69 early_stopping = EarlyStopping(monitor='val_loss', patience=1)		history = model.fit(train_generator, epochs=10, validation_data=test_generator, callbacks=[early_stopping])
2024-04-22-14-44-15 197 70 loss, accuracy = model.evaluate(test_generator)	print("Test Loss:", loss)	print("Test Accuracy:", accuracy)
2024-04-22-14-44-15 197 71 predictions = model.predict(test_generator, verbose=1)
2024-04-22-14-44-15 197 72 y_pred = (predictions > 0.5).astype(int)	y_pred.max(), y_pred.min(), len(y_pred)
2024-04-22-14-44-15 197 73 len(X_test), len(y_pred)
2024-04-22-14-44-15 197 74 from src.processing import plot_predictions	plot_predictions(X_test, y_pred, LENGTH_TIMESTEPS)
2024-04-22-14-44-15 197 75 from src.processing import plot_predictions	plot_predictions(X_test, y_pred, LENGTH_TIMESTEPS, 'C13Z')

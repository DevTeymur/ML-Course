2024-04-23-11-10-45 199 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from mpl_toolkits.mplot3d import Axes3D	import numpy as np	import scipy as sp	import cvxopt	from submission_utils import save_history, check_and_prepare_for_submission	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-04-23-11-10-45 199 2 import random	    	def permute(seq):	    seq_array = np.array(list(seq))	    return ''.join(np.random.permutation(seq_array))		def generate_master_sequence(alphabet_size, seq_length, start_char=70):	    return ''.join(chr(np.random.randint(start_char, start_char + alphabet_size)) for _ in range(seq_length))		def perturb(master_sequence, noise):	    seq_array = np.array(list(master_sequence))	    num_perturbations = int(len(seq_array) * noise)	    for _ in range(num_perturbations):	        i1, i2 = np.random.choice(len(seq_array), 2, replace=False)	        seq_array[i1], seq_array[i2] = seq_array[i2], seq_array[i1]	    return ''.join(seq_array)		def randomize_length(seqs, endpoint_trim_dim):	    randomized_seqs = []	    for seq in seqs:	        trim_length = np.random.randint(0, endpoint_trim_dim + 1)	        randomized_seqs.append(seq[trim_length:-trim_length])	    return randomized_seqs		def make_single_cluster_data(master_sequence, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    inliners = [perturb(master_sequence, inliner_noise) for _ in range(n_inliners)]	    outliers = [perturb(permute(master_sequence), outlier_noise) for _ in range(n_outliers)]		    all_seqs = inliners + outliers	    	    if endpoint_trim_dim is not None:	        all_seqs = randomize_length(all_seqs, endpoint_trim_dim)	    return all_seqs		def make_data(master_sequence, n_clusters, cluster_centres_noise, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim=None):	    sequences, targets = [], []	    for i in range(n_clusters):	        cluster_centre = perturb(master_sequence, cluster_centres_noise)	        cluster_seqs = make_single_cluster_data(cluster_centre, n_inliners, n_outliers, inliner_noise, outlier_noise, endpoint_trim_dim)	        sequences.extend(cluster_seqs)	        targets.extend([i] * len(cluster_seqs))	    return sequences, targets	    	save_history()
2024-04-23-11-10-45 199 3 # DELETE AT THE END		np.random.seed(42)		# For example 1	seq = "temperature"	permuted_seq = permute(seq)	print(f'Original sequence: {seq}, permuted sequence: {permuted_seq}')		# For example 2	master_seq = generate_master_sequence(alphabet_size=5, seq_length=10)	print("Master sequence:", master_seq)		# For example 3	perturbed_seq = perturb(master_seq, noise=0.8)	print("Perturbed sequence:", perturbed_seq)		# For example 4	seqs = ["salam", "temperature", "verynice"]	randomized_seqs = randomize_length(seqs, endpoint_trim_dim=2)	print("Randomized sequences:", randomized_seqs)		# For example 5	master_sequence = "againtemperature"	inlier_seqs = make_single_cluster_data(master_sequence, n_inliners=3, n_outliers=2, inliner_noise=0.1, outlier_noise=0.5)	print("Inlier sequences:", inlier_seqs[:3])	print("Inlier sequences:", inlier_seqs[3:])		# For example 6	master_sequence = "anotherwordthatdoesnotexist"	seqs, targets = make_data(master_sequence, n_clusters=2, cluster_centres_noise=0.1, n_inliners=3, n_outliers=2, inliner_noise=0.1, outlier_noise=0.5)	print("Generated sequences:", seqs)	print("Cluster labels:", targets)
2024-04-23-11-10-45 199 4 def histogram_vectorizer_old(seqs):	    def vectotize_single_string(seq):	        counter = dict.fromkeys(seq, 0) # Initializing the counter	        for char in seq:	            counter[char] += 1	        histogram_vector = list(counter.values())	        return histogram_vector	    vectorized_seqs = [vectotize_single_string(seq) for seq in seqs]	    return vectorized_seqs		def histogram_vectorizer(seqs):	    def convert_to_int_sequence(seq):	        return [ord(char) for char in seq]		    def single_histogram_vectorizer(seq):	        int_seq = convert_to_int_sequence(seq)	        vector = [int_seq.count(i) for i in range(256)] # ASCII characters length	        return vector		    vectorized_seqs = [single_histogram_vectorizer(seq) for seq in seqs]	    return np.array(vectorized_seqs)	        		from sklearn.decomposition import PCA		def pca_plot(X, y=None):	    # Performing PCA and reducing the dimentions to 2D	    pca = PCA(n_components=2)	    X_pca = pca.fit_transform(X)		    # print(X_pca)	    plt.figure(figsize=(8, 6))	    if y is None:	        plt.scatter(X_pca[:, 0], X_pca[:, 1], s=50, alpha=0.8, cmap='viridis')	    else:	        colors_for_labels = ['r', 'b', 'g', 'y', 'c', 'm', 'k', 'w']	        unique_labels = np.unique(y)	        for label in unique_labels:	            plt.scatter(X_pca[y == label, 0], X_pca[y == label, 1], c=colors_for_labels[label], label=label, s=50, alpha=0.8)	    plt.legend(loc='best')	    plt.xlabel('PCA1')	    plt.ylabel('PCA2')	    plt.show()		save_history()

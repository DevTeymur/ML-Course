2024-03-11-21-42-06 384 1 get_ipython().run_line_magic('matplotlib', 'inline')	import matplotlib.pyplot as plt	from mpl_toolkits.mplot3d import Axes3D	import numpy as np	import scipy as sp	from submission_utils import save_history, check_and_prepare_for_submission	# import warnings filter	from warnings import simplefilter	# ignore all future warnings	simplefilter(action='ignore', category=FutureWarning)
2024-03-11-21-42-06 384 2 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 3 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets)	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets)	    	    plt.show()		save_history()
2024-03-11-21-42-06 384 4 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 5 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets)	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets)	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3') 	    plt.show()		save_history()
2024-03-11-21-42-06 384 6 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 7 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='magma')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='magma')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3') 	    plt.show()		save_history()
2024-03-11-21-42-06 384 8 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 9 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3') 	    plt.show()		save_history()
2024-03-11-21-42-06 384 10 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 11 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3')	    ax.legend(loc='best') 	    plt.show()		save_history()
2024-03-11-21-42-06 384 12 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 13 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3')	    ax.legend(loc='best') 	    plt.colorbar(label='Target')	    plt.show()		save_history()
2024-03-11-21-42-06 384 14 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 15 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))	    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    print(data_mtx[:5]), print(targets[:5])	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3')	    plt.show()		save_history()
2024-03-11-21-42-06 384 16 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 17 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    # informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    informative_inliners = np.random.multivariate_normal(np.ones(n_informative_features), np.eye(n_informative_features) * std**2	, size=n_inliners)	    	    # non_informative_inliners = np.random.multivariate_normal(np.zeros(n_non_informative_features), np.eye(n_non_informative_features) * std**2  , size=n_inliners)	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))		    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    informative_outliers = np.random.multivariate_normal(-np.ones(n_informative_features), np.eye(n_informative_features) * outliers_std**2, size=(n_outliers,))		    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.multivariate_normal(-np.ones(n_informative_features), np.eye(n_informative_features) * std**2, size=(n_informative_features,))	    # informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    print(data_mtx[:5]), print(targets[:5])	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3')	    plt.show()		save_history()
2024-03-11-21-42-06 384 18 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
2024-03-11-21-42-06 384 19 def make_positive_data(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    # Calculation of the number of outliers and inliners	    n_inliners = int((1 - fraction_of_outliers) * n_instances)	    n_outliers = int(fraction_of_outliers * n_instances)	    # print(f'Normal: {n_inliners}, outliers {n_outliers}')		    # Generate inliners	    # informative_inliners = np.random.normal(1, std, (n_inliners, n_informative_features))	    informative_inliners = np.random.multivariate_normal(np.ones(n_informative_features), np.eye(n_informative_features) * std**2	, size=n_inliners)	    	    # non_informative_inliners = np.random.multivariate_normal(np.zeros(n_non_informative_features), np.eye(n_non_informative_features) * std**2  , size=n_inliners)	    non_informative_inliners = np.random.normal(0, std, (n_inliners, n_non_informative_features))		    # print(f'Informative inliners: {informative_inliners.shape}, non-informative inliners: {non_informative_inliners.shape}')	    # print(f'{informative_inliners[:5]}')	    # print(f'{non_informative_inliners[:5]}')		    # Generate outliers	    informative_outliers = np.random.normal(-1, outliers_std, (n_outliers, n_informative_features))	    informative_outliers = np.random.multivariate_normal(-np.ones(n_informative_features), np.eye(n_informative_features) * outliers_std**2, size=(n_outliers,))		    non_informative_outliers = np.random.normal(0, outliers_std, (n_outliers, n_non_informative_features))	    # print(f'Informative outliers: {informative_outliers.shape}, non-informative outliers: {non_informative_outliers.shape}')	    # print(f'{informative_outliers[:5]}')	    # print(f'{non_informative_outliers[:5]}')		    # Join all generated data	    all_positive_data = np.concatenate((np.hstack((informative_inliners, non_informative_inliners)),	                                    np.hstack((informative_outliers, non_informative_outliers))))	    # print(f'All data: {all_positive_data.shape}')	    # print(f'All data: {type(all_positive_data)}')	    return all_positive_data		def make_negative_data(n_instances, n_informative_features, n_non_informative_features, std):	    informative = np.random.multivariate_normal(-np.ones(n_informative_features), np.eye(n_informative_features) * std**2, size=(n_instances,))	    # informative = np.random.normal(-1, std, (n_instances, n_informative_features))	    non_informative = np.random.normal(0, std, (n_instances, n_non_informative_features))	    # print(f'Informative: {informative.shape}, non-informative: {non_informative.shape}')	    # print(f'{informative[:5]}')	    # print(f'{non_informative[:5]}')		    all_negative_data = np.hstack((informative, non_informative))	    # print(all_negative_data.shape)	    # print(all_negative_data[:5])	    # print(type(all_negative_data))	    return all_negative_data	    		def make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std):	    amount_of_positives = n_instances // 2	    amount_of_negatives = n_instances - amount_of_positives	    positive_data = make_positive_data(n_instances=amount_of_positives, 	                                       fraction_of_outliers=fraction_of_outliers, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std, 	                                       outliers_std=outliers_std)	    negative_data = make_negative_data(n_instances=amount_of_negatives, 	                                       n_informative_features=n_informative_features, 	                                       n_non_informative_features=n_non_informative_features, 	                                       std=std)	    	    data_mtx = np.concatenate((positive_data, negative_data))	    targets = np.concatenate((np.ones(amount_of_positives), np.zeros(amount_of_negatives)))	    # print(f'Final data: {data_mtx.shape}')	    # print(f'Targets: {targets.shape}')	    print(data_mtx[:5]), print(targets[:5])	    return data_mtx, targets		def plot2d(data_mtx, targets=None, title='', size=8):	    plt.figure(figsize=(size, size))	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1])	    else: 	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], c=targets, cmap='viridis')	    plt.title(title)	    plt.show()  		def plot3d(data_mtx, targets=None, title='', size=8):	    fig = plt.figure(figsize=(size, size))	    ax = fig.add_subplot(111, projection='3d')	    if targets is None:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2])	    else:	        plt.scatter(data_mtx[:, 0], data_mtx[:, 1], data_mtx[:, 2], c=targets, cmap='viridis')	    plt.title(title)	    ax.set_xlabel('Column 1')	    ax.set_ylabel('Column 2')	    ax.set_zlabel('Column 3')	    plt.show()		save_history()
2024-03-11-21-42-06 384 20 # Just run the following code, do not modify it	n_instances = 1000	fraction_of_outliers = 0.3	n_informative_features = 1	n_non_informative_features = 2	std = .5	outliers_std = 5		data_mtx, targets = make_dataset(n_instances, fraction_of_outliers, n_informative_features, n_non_informative_features, std, outliers_std)		plot2d(data_mtx, targets, title='Data 2D', size=8)	plot3d(data_mtx, targets, title='Data 3D', size=8)
